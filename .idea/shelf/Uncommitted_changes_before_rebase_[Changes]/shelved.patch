Index: src/main/java/org/example/SnakeGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.awt.Rectangle;\r\n\r\n\r\npublic class SnakeGame implements Runnable {\r\n\r\n    private boolean started = false;\r\n    private boolean finishedBlink1 = false;\r\n    private boolean finishedBlink2 = false;\r\n    private boolean finished = false;\r\n    private int score = 0;\r\n    private int maxScoreLeft = 0;\r\n    private int seconds = 0;\r\n    private int minutes = 0;\r\n    private boolean pause = false;\r\n    private boolean restart = false;\r\n    private boolean startMenu = true;\r\n    private int difficultyLevel=0;\t//0=easy, 1=normal, 2=hard\r\n    private  int difficultyLevel_thread;\r\n\r\n    private String menuSelection = \"Start game\";\r\n\r\n    private Snake snake;\r\n    private SnakeGame snakeGame;\r\n    private Food food;\r\n\r\n\r\n    public void startGame(SnakeGame snakeGame) {\r\n        started = true;\r\n        Thread t = new Thread(snakeGame);\r\n        menuSelection = \"Restart game\";\r\n\r\n        switch(snakeGame.getDifficultyLevel()) {\r\n            case 0:\r\n                snakeGame.setDifficultyLevel_thread(300);\r\n                break;\r\n            case 1:\r\n                snakeGame.setDifficultyLevel_thread(200);\r\n                break;\r\n            case 2:\r\n                snakeGame.setDifficultyLevel_thread(100);\r\n                break;\r\n        }\r\n\r\n        t.start();\r\n    }\r\n\r\n    public void restartGame() {\r\n        snake.setSnakeX(100);\r\n        snake.setSnakeY(100);\r\n        snake.setSnakeLeft(false);\r\n        snake.setSnakeUp(false);\r\n        snake.setSnakeDown(false);\r\n        snake.setSnakeRight(true);\r\n        snakeGame.setFinished(false);\r\n        snakeGame.setScore(0);\r\n        snakeGame.setSeconds(0);\r\n        snakeGame.setMinutes(0);\r\n        snakeGame.setMaxScoreLeft(100);\r\n        snakeGame.setPause(false);\r\n        snake.getList().clear();\r\n        snake.getList().add(new Rectangle(snake.getSnakeX(), snake.getSnakeY(), 10, 10));\r\n    }\r\n\r\n\r\n    public void finishGame() {\r\n        started = false;\r\n        GUI.f1.repaint();\r\n        //create blink animation\r\n        for(int i=0; i<4; i++) {\r\n            finishedBlink1 = true;\r\n\r\n            try {\r\n                Thread.sleep(500);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n            finishedBlink1 = false;\r\n            finishedBlink2 = true;\r\n            GUI.f1.repaint();\r\n\r\n            try {\r\n                Thread.sleep(500);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n            finishedBlink2 = false;\r\n        }\r\n\r\n        //display \"game over\" and score\r\n        finishedBlink1 = false;\r\n        finishedBlink2 = false;\r\n        finished = true;\r\n        menuSelection = \"Restart game\";\r\n        GUI.f1.repaint();\r\n\r\n    }\r\n\r\n\r\n\r\n    public void run() {\r\n\r\n        snake = new Snake();\r\n        food = new Food();\r\n        food.setFood(food);\r\n        Main.gui.setFood(food);\r\n        Main.gui.setSnake(snake);\r\n\r\n\r\n        snake.getList().add(new Rectangle(snake.getSnakeX(), snake.getSnakeY(), 10, 10));\r\n\r\n        long startTime = System.currentTimeMillis();\r\n        long currentTime = 0;\r\n\r\n        //игровой цикл\r\n        while(snakeGame.started==true) {\r\n\r\n            if(snakeGame.isPause()==false) {\r\n\r\n                collisionWall();\r\n                placeFood();\r\n\r\n                //обновление счета\r\n                if(snakeGame.getMaxScoreLeft()>0) {\r\n                    snakeGame.setMaxScoreLeft(snakeGame.getMaxScoreLeft()-1);\r\n                }\r\n\r\n                //проверка столкновения с едой\r\n                collisionFood();\r\n\r\n                //проверка столкновения с собой\r\n                collisionSnake();\r\n\r\n                //отрисовка змейки\r\n                snake.getList().add(new Rectangle(snake.getSnakeX(), snake.getSnakeY(), 10, 10));\r\n                snake.getList().remove(0);\r\n\r\n                //информация о времени\r\n                currentTime = System.currentTimeMillis();\r\n                if(currentTime - startTime >= 901) {\r\n                    if(snakeGame.getSeconds()<59) {\r\n                        snakeGame.setSeconds(snakeGame.getSeconds()+1);\r\n                    }else if(snakeGame.getSeconds()>=59) {\r\n                        snakeGame.setSeconds(0);\r\n                        snakeGame.setMinutes(snakeGame.getMinutes()+1);\r\n                    }\r\n                    startTime += currentTime - startTime + 100;\r\n                }\r\n            }\r\n\r\n            GUI.f1.repaint();\r\n\r\n\r\n            try {\r\n                Thread.sleep(snakeGame.getDifficultyLevel_thread());\r\n            } catch (InterruptedException e) {\r\n\r\n                e.printStackTrace();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void collisionWall() {\r\n        if(snake.isSnakeUp()==true) {\r\n            if(snake.getSnakeY()<20) {\r\n                finishGame();\r\n            }else{\r\n                snake.setSnakeY(snake.getSnakeY() - 15);\r\n            }\r\n\r\n        }else if(snake.isSnakeDown()==true) {\r\n            if(snake.getSnakeY()>335) {\r\n                finishGame();\r\n            }else {\r\n                snake.setSnakeY(snake.getSnakeY() + 15);\r\n            }\r\n        }else if(snake.isSnakeLeft()==true) {\r\n            if(snake.getSnakeX()<20) {\r\n                finishGame();\r\n            }else {\r\n                snake.setSnakeX(snake.getSnakeX() - 15);\r\n            }\r\n        }else if(snake.isSnakeRight()==true) {\r\n            if(snake.getSnakeX()>370) {\r\n                finishGame();\r\n            }else {\r\n                snake.setSnakeX(snake.getSnakeX() + 15);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void collisionSnake() {\r\n        for(int i=1; i<snake.getList().size()-1; i++) {\r\n\r\n            if(i+1<snake.getList().size()) {\r\n                if(snake.getList().get(0).intersects(snake.getList().get(i+1))) {\r\n                    finishGame();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void collisionFood() {\r\n        if(Math.abs(food.getFoodX()-snake.getSnakeX())<=8  &&  Math.abs(food.getFoodY()-snake.getSnakeY())<=8) {\r\n            food.setFoodPlaced(false);\r\n\r\n            snake.getList().add(new Rectangle(snake.getSnakeX(), snake.getSnakeY(), 10, 10));\r\n\r\n            snakeGame.score += snakeGame.getMaxScoreLeft();\r\n        }\r\n    }\r\n\r\n\r\n    public void placeFood() {\r\n        if(food.isFoodPlaced() == false) {\r\n            food.setFoodX((int) (35+Math.random()*335));\r\n            food.setFoodY((int) (35+Math.random()*315));\r\n            food.setFoodPlaced(true);\r\n            snakeGame.maxScoreLeft = 100;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public Snake getSnake() {\r\n        return snake;\r\n    }\r\n\r\n\r\n    public void setSnake(Snake snake) {\r\n        this.snake = snake;\r\n    }\r\n\r\n    public boolean isStarted() {\r\n        return started;\r\n    }\r\n\r\n    public void setStarted(boolean started) {\r\n        this.started = started;\r\n    }\r\n\r\n    public boolean isFinished() {\r\n        return finished;\r\n    }\r\n\r\n    public void setFinished(boolean finished) {\r\n        this.finished = finished;\r\n    }\r\n\r\n    public int getScore() {\r\n        return score;\r\n    }\r\n\r\n    public void setScore(int score) {\r\n        this.score = score;\r\n    }\r\n\r\n    public SnakeGame getSnakeGame() {\r\n        return snakeGame;\r\n    }\r\n\r\n\r\n    public void setSnakeGame(SnakeGame snakeGame) {\r\n        this.snakeGame = snakeGame;\r\n    }\r\n\r\n    public boolean isFinishedBlink1() {\r\n        return finishedBlink1;\r\n    }\r\n\r\n\r\n    public void setFinishedBlink1(boolean finishedBlink1) {\r\n        this.finishedBlink1 = finishedBlink1;\r\n    }\r\n\r\n\r\n    public boolean isFinishedBlink2() {\r\n        return finishedBlink2;\r\n    }\r\n\r\n\r\n    public void setFinishedBlink2(boolean finishedBlink2) {\r\n        this.finishedBlink2 = finishedBlink2;\r\n    }\r\n\r\n\r\n    public boolean isPause() {\r\n        return pause;\r\n    }\r\n\r\n\r\n    public void setPause(boolean pause) {\r\n        this.pause = pause;\r\n    }\r\n\r\n\r\n    public boolean isRestart() {\r\n        return restart;\r\n    }\r\n\r\n\r\n    public void setRestart(boolean restart) {\r\n        this.restart = restart;\r\n    }\r\n\r\n\r\n    public String getMenuSelection() {\r\n        return menuSelection;\r\n    }\r\n\r\n\r\n    public void setMenuSelection(String menuSelection) {\r\n        this.menuSelection = menuSelection;\r\n    }\r\n\r\n    public int getMaxScoreLeft() {\r\n        return maxScoreLeft;\r\n    }\r\n\r\n    public void setMaxScoreLeft(int maxScoreLeft) {\r\n        this.maxScoreLeft = maxScoreLeft;\r\n    }\r\n\r\n    public int getSeconds() {\r\n        return seconds;\r\n    }\r\n\r\n    public void setSeconds(int seconds) {\r\n        this.seconds = seconds;\r\n    }\r\n\r\n    public int getMinutes() {\r\n        return minutes;\r\n    }\r\n\r\n    public void setMinutes(int minutes) {\r\n        this.minutes = minutes;\r\n    }\r\n\r\n\r\n    public boolean isStartmenu() {\r\n        return startMenu;\r\n    }\r\n\r\n    public void setStartmenu(boolean startmenu) {\r\n        this.startMenu = startmenu;\r\n    }\r\n\r\n    public int getDifficultyLevel() {\r\n        return difficultyLevel;\r\n    }\r\n\r\n    public void setDifficultyLevel(int difficultyLevel) {\r\n        this.difficultyLevel = difficultyLevel;\r\n    }\r\n\r\n    public int getDifficultyLevel_thread() {\r\n        return difficultyLevel_thread;\r\n    }\r\n\r\n    public void setDifficultyLevel_thread(int difficultyLevel_thread) {\r\n        this.difficultyLevel_thread = difficultyLevel_thread;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/SnakeGame.java b/src/main/java/org/example/SnakeGame.java
--- a/src/main/java/org/example/SnakeGame.java	(revision 73b3cb89f277d823b504aca84cca3b03c51ca0a2)
+++ b/src/main/java/org/example/SnakeGame.java	(date 1710304366326)
@@ -218,8 +218,8 @@
 
     public void placeFood() {
         if(food.isFoodPlaced() == false) {
-            food.setFoodX((int) (35+Math.random()*335));
-            food.setFoodY((int) (35+Math.random()*315));
+            food.setFoodX((int) (5+Math.random()*33.5) * 10);
+            food.setFoodY((int) (2.5+Math.random()*31.5) * 10);
             food.setFoodPlaced(true);
             snakeGame.maxScoreLeft = 100;
         }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"86977dbe-b21a-403f-86f9-f3c3aaad6c98\" name=\"Changes\" comment=\"initial commit\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ChangesViewManager\" show_ignored=\"true\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"JavaSnake\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"JavaSnake\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"JavaSnake\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"build\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"JavaSnake\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"build setup\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2bJAg71X4Qs6Zva4dotJkPiXo1H\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Gradle.JavaSnake [:Main.main()].executor\": \"Run\",\r\n    \"Gradle.JavaSnake [build].executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"onboarding.tips.debug.path\": \"C:/Users/lexas/Desktop/Main Folder/Main/JavaSnake/src/main/java/org/example/Main.java\",\r\n    \"settings.editor.selected.configurable\": \"reference.settingsdialog.project.gradle\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"JavaSnake [build]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.JavaSnake [build]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-20.0.2-corretto-20.0.2.1-4caba194b151-5bc9ecd2\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"86977dbe-b21a-403f-86f9-f3c3aaad6c98\" name=\"Changes\" comment=\"\" />\r\n      <created>1705922967385</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1705922967385</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"initial commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1706588378682</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706588378682</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"master\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"User\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"*\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"user\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"*\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"initial commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"initial commit\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 73b3cb89f277d823b504aca84cca3b03c51ca0a2)
+++ b/.idea/workspace.xml	(date 1710302392892)
@@ -4,7 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="86977dbe-b21a-403f-86f9-f3c3aaad6c98" name="Changes" comment="initial commit" />
+    <list default="true" id="86977dbe-b21a-403f-86f9-f3c3aaad6c98" name="Changes" comment="Interface 1.0">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/SnakeGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/SnakeGame.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -63,10 +66,24 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="master" />
+        <entry key="$PROJECT_DIR$" value="main" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;Ocloa&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">
+    <option name="selectedUrlAndAccountId">
+      <UrlAndAccount>
+        <option name="accountId" value="52386eab-d98a-4426-95ec-54ce43fd1c6d" />
+        <option name="url" value="https://github.com/Ocloa/JavaSnake" />
+      </UrlAndAccount>
+    </option>
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 2
@@ -77,19 +94,19 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Gradle.JavaSnake [:Main.main()].executor": "Run",
-    "Gradle.JavaSnake [build].executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "master",
-    "ignore.virus.scanning.warn.message": "true",
-    "kotlin-language-version-configured": "true",
-    "onboarding.tips.debug.path": "C:/Users/lexas/Desktop/Main Folder/Main/JavaSnake/src/main/java/org/example/Main.java",
-    "settings.editor.selected.configurable": "reference.settingsdialog.project.gradle"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Gradle.JavaSnake [:Main.main()].executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.JavaSnake [build].executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/lexas/Desktop/Main Folder/Main/JavaSnake/src/main/java/org/example/Main.java&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settingsdialog.project.gradle&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="JavaSnake [build]" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
       <ExternalSystemSettings>
@@ -122,6 +139,7 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
+        <option value="jdk-17.0.10-corretto-17.0.10-4caba194b151-5cd809f4" />
         <option value="jdk-20.0.2-corretto-20.0.2.1-4caba194b151-5bc9ecd2" />
       </set>
     </attachedChunks>
@@ -143,7 +161,23 @@
       <option name="project" value="LOCAL" />
       <updated>1706588378682</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Snake class">
+      <option name="closed" value="true" />
+      <created>1710132130581</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1710132130581</updated>
+    </task>
+    <task id="LOCAL-00003" summary="Interface 1.0">
+      <option name="closed" value="true" />
+      <created>1710151025625</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1710151025625</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -204,6 +238,15 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="initial commit" />
-    <option name="LAST_COMMIT_MESSAGE" value="initial commit" />
+    <MESSAGE value="Snake class" />
+    <MESSAGE value="Interface 1.0" />
+    <option name="LAST_COMMIT_MESSAGE" value="Interface 1.0" />
+  </component>
+  <component name="XDebuggerManager">
+    <watches-manager>
+      <configuration name="GradleRunConfiguration">
+        <watch expression="food" language="JAVA" />
+      </configuration>
+    </watches-manager>
   </component>
 </project>
\ No newline at end of file
